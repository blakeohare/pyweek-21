import GFX;
import Math;

// This is now repurposed for when you lose as well as it needs to apply the record for longest jump

class WinScreen {
	field next;
	field isWin;
	field bg;
	field counter = 0;
	field isLongestJumpRecord = false;
	field timesPlayed;
	field longestJump;
	
	constructor(bg, isWin = true) {
		this.next = this;
		this.isWin = isWin;
		this.bg = bg;
		id = this.bg.id;
		timesPlayed = DB.getInt(id + '_timesplayed') + 1;
		DB.setValue(id + '_timesplayed', timesPlayed);
		DB.setValue(id + '_completed', True);
		this.timesPlayed = timesPlayed;
		ActiveSesssion.INSTANCE.ensureTimerRunning(false);
		
		ActiveSession.INSTANCE.endGame();
		this.longestJump = ActiveSession.INSTANCE.getLongestJump();
		
		this.longestJumpRecord = false;
		this.gameDurationRecord = false;
		this.jumpCountRecord = false;
		
		prev = DB.getFloat(id + '_longestjump');
		if (this.longestJump > prev) {
			DB.setValue(id + '_longestjump', this.longestJump);
			this.longestJumpRecord = true;
		}
		
		this.gameDuration = ActiveSession.INSTANCE.gameDuration;
		if (!isWin) { // assuming all losses are timeouts since others resolve into restore-replays. 
			this.gameDuration = ActiveSession.INSTANCE.timeLimitSeconds * 1.0; // avoid slight rounding errors that would make it look unfair. 
		}
		if (!DB.hasValue(id + '_fastesttime') || DB.getFloat(id + '_fastesttime') > this.gameDuration) {
			if (this.isWin) {
				DB.setValue(id + '_fastesttime', this.gameDuration);
				this.gameDurationRecord = true;
			}
		}
		
		this.jumpCount = ActiveSession.jumpCount;
		if (!DB.hasValue(id + '_fewestjumps') || this.jumpCount < DB.getInt(id + '_fewestjumps')) {
			if (this.isWin) {
				DB.setValue(id + '_fewestjumps', this.jumpCount);
				this.jumpCountRecord = true;
			}
		}
		
		DB.save();
	}
	
	function update(events, dt) {
		this.counter += dt;
		if (this.counter > 3.3) {
			for (event : events) {
				if (event.down) {
					if (event.type == 'space' || event.type == 'enter') {
						mss = new MapSelectScreen();
						this.next = new TransitionScene(self, mss);
					}
				}
			}
		}
	}
	
	function render() {
		this.bg.render();
		GFX.Draw.rectangle(0, 0, 800, 600, 0, 0, 0, 128);
		
		TextEngine.render(this.isWin ? "DELIVERY SUCCESSFUL!" : "TIME'S UP!", 'XL', 100, 50);
		
		cols = [100, 300, 500];
		y = 250;
		
		if (this.counter > 1) {
			TextEngine.render('Attempt #' + this.timesPlayed, 'L', cols[0], y);
		}
		
		y += 80;
		if (this.counter > 1.5) {
			TextEngine.render("Duration:", 'L', cols[0], y);
			TextEngine.render(formatTime(this.gameDuration), 'L', cols[1], y);
			if (this.gameDurationRecord) {
				this.renderBounceText("NEW RECORD!", 'M', cols[2], y);
			}
		}
		
		y += 80;
		if (this.counter > 2) {
			TextEngine.render("Total Jumps:", 'L', cols[0], y);
			TextEngine.render(this.jumpCount + '', 'L', cols[1], y);
			if (this.gameDurationRecord) {
				this.renderBounceText("NEW RECORD!", 'M', cols[2], y);
			}
		}
		
		y += 80;
		if (this.counter > 2) {
			TextEngine.render("Longest Jump:", 'L', cols[0], y);
			TextEngine.render(formatTime(this.longestJump), 'L', cols[1], y);
			if (this.longestJumpRecord) {
				this.renderBounceText("NEW RECORD!", 'M', cols[2], y);
			}
		}
		
		y += 80;
		if (this.counter > 3.3) {
			this.renderBounceText("Press ENTER or something", 'S', cols[1], y);
		}
	}
		
	function renderBounceText(text, size, x, ybase, isSlow = false) {
		if (isSlow) {
			y = ybase - 5 * Math.sin(this.counter * Math.PI);
		} else {
			y = ybase - Math.abs(10 * Math.sin(this.counter * Math.PI * 4));
		}
		TextEngine.render(text, size, x, y);
	}
}
