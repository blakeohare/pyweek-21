class CutScene {
	field next;
	field index = 0;
	field stateCounter = 0.0;
	field progress = 0.0;
	
	static field STATES = [
			['start', 2],
			['ringring', 1],
			['phone1-normal', 2],
			['ufo-enter', 1],
			['ufo-wait', 1],
			['ufo-blast', 1],
			['white-in', 1],
			['white', 1],
			['white-out', 1],
			['end', 2],
		];
	
	constructor() {
		this.next = this;
	}
	
	function render() {
		if (this.index >= CutScene.STATES.length) {
			state = CutScene.STATES[-1];
		} else {
			state = CutScene.STATES[this.index];
		}

		progress = 1.0 * this.state_counter / state[1];
		if (progress < 0) progress = 0.0;
		else if (progress > 1) progress = 1.0;
		antiprogress = 1.0 - progress;
		id = state[0];

		asteroidsY = sin(currentTime() * TWO_PI) * 4;
		
		switch (id) {
			case 'start':
				this.blitImage('window-background-small', 350, 50);
				this.blitImage('page1', 0, 0);
				break;
			
			case 'ringring':
				this.blitImage('window-background-small', 350, 50);
				this.blitImage('page1', 0, 0);
				this.drawText("*RING RING*", 566, 31);
				break;
				
			case 'phone1-normal':
				this.blitImage('window-background', 85, 58);
				this.blitImage('window', 0, 0);
				break;
			
			case 'ufo-enter':
				this.blitImage('window-background', 85, 58);
				yStart = -300;
				yEnd = 100;
				y = progress * yEnd + antiprogress * yStart;
				this.blitImage('ufo', 200, y);
				this.blitImage('window', 0, 0);
				break;
				
			case 'ufo-wait':
				this.blitImage('window-background', 85, 58);
				this.blitImage('ufo', 200, 100);
				this.blitImage('window', 0, 0);
				break;
				
			case 'ufo-blast':
				this.blitImage('window-background', 85, 58);
				this.blitImage('beam', 270, 180);
				this.blitImage('ufo', 200, 100);
				this.blitImage('window', 0, 0);
				break;
			
			case 'white-in':
				this.blitImage('window-background', 85, 58);
				this.blitImage('beam', 270, 180);
				this.blitImage('ufo', 200, 100);
				this.blitImage('window', 0, 0);
				this.whiteOverlay(progress);
				break;
				
			case 'white':
				this.blitImage('white', 0, 0, 1.0);
				break;
				
			case 'white-out':
				this.blitImage('space-background', 85, 58);
				this.blitImage('space-asteroids', 85, 58 + asteroidsY);
				this.blitImage('window', 0, 0);
				this.whiteOverlay(antiprogress);
				break;
				
			case 'end':
				this.blitImage('space-background', 85, 58);
				this.blitImage('space-asteroids', 85, 58 + asteroidsY);
				this.blitImage('window', 0, 0);
				break;
			
			default: assert(false); break;
		}
	}
	
	function update(events, dt) {
		this.state_counter += dt;
		if (this.index >= CutScene.STATES.length) {
			this.leave();
		}
		
		for (event : events) {
			if (event.down && (event.type == 'enter' || event.type == 'space')) {
				this.leave();
			}
		}

		if (this.index >= CutScene.STATES.length) {
			this.index = CutScene.STATES.length - 1;
		}

		state = CutScene.STATES[this.index];

		total = state[1];
		if (this.state_counter >= total) {
			this.state_counter = 0.0;
			this.index++;
		}
		
		this.progress = 1.0 * this.state_counter / total;
	}

	function leave() {
		this.next = new TransitionScene(this, new TitleScene());
		Database.setValue('intro_shown', true);
		Database.save();
	}

	function drawText(text, x, y) {
		TextEngine.render(text, 'L', x, y);
	}

	function blitImage(path, x, y) {
		ImageLibrary.get('cutscene/' + path + '.png').draw(x, y);
	}
	
	function whiteOverlay(opacity) {
		alpha = floor(opacity * 255 + .5);
		if (alpha < 0) alpha = 0;
		if (alpha > 255) alpha = 255;
		
		GFX.Draw.rectangle(0, 0, 800, 600, 255, 255, 255, alpha);
	}
}
